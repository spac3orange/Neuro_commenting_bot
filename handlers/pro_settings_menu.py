from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandStart
from aiogram import Router, F
from keyboards import kb_admin
from filters.is_admin import IsAdmin
from filters.sub_types import BasicSub
from database.db_action import db
from filters.known_user import KnownUser
router = Router()
router.message.filter(
    KnownUser()
)





@router.callback_query(F.data == 'pro_settings', ~BasicSub())
async def process_start(callback: CallbackQuery):
    uid = callback.from_user.id
    groups = await db.db_get_all_telegram_channels(uid)
    grp_dict = {}
    for grp in groups:
        triggers = await db.db_get_triggers_for_group(grp)
        promts = await db.db_get_promts_for_group(grp)
        grp_dict[grp] = ['üü¢' if triggers else 'üî¥', 'üü¢' if promts else 'üî¥']

    string = ''
    for k, v in grp_dict.items():
        string += '\n' + k + f'\n<b>–¢—Ä–∏–≥–≥–µ—Ä—ã:</b> {v[0]} <b>–ü—Ä–æ–º—Ç:</b> {v[1]}'
    channels = '\n'.join(await db.db_get_all_telegram_channels(uid))
    await callback.message.answer(text=f'<b>Pro –ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n'
                                       f'<b>–ö–∞–Ω–∞–ª—ã:</b>\n'
                                       f'{string}\n\n'
                                       f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: /help_promts',
                                  reply_markup=kb_admin.pro_settings_btns(),
                                  parse_mode='HTML')

@router.callback_query(F.data == 'pro_settings')
async def process_start(callback: CallbackQuery):
    await callback.message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π')
